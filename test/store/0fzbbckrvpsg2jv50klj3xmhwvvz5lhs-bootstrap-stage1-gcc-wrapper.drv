Derive([("out","/home/matto/projects/haskell/store-graph/test/store/nqg73y4xzkip8qvl0924g0qcjiswdlbi-bootstrap-stage1-gcc-wrapper","","")],[("/home/matto/projects/haskell/store-graph/test/store/3sq731s8g9n8qcqk78ralmcgqhxbf81q-bootstrap-stage0-glibc.drv",["out"]),("/home/matto/projects/haskell/store-graph/test/store/578vw9wryv6jn88hbq4lnhppjnz592fr-bootstrap-stage0-stdenv-linux.drv",["out"]),("/home/matto/projects/haskell/store-graph/test/store/a4q2m4ks6n9zki8118wmcm4c686zsi38-bootstrap-tools.drv",["out"]),("/home/matto/projects/haskell/store-graph/test/store/zkxp0d7wsk681s4wlhwcyjfa1qbsq1fr-bootstrap-stage0-binutils-wrapper.drv",["out"])],["/home/matto/projects/haskell/store-graph/test/store/3fb2y6zvc9axs7n3l8460573cvqrg2gv-cc-wrapper.sh","/home/matto/projects/haskell/store-graph/test/store/7acjx0rnikxdbj5wzlq5hicipc2q9647-setup-hook.sh","/home/matto/projects/haskell/store-graph/test/store/f4r0bk1zskca675nwynsfak92izkkchf-add-hardening.sh","/home/matto/projects/haskell/store-graph/test/store/fh1b3qgm8v91fnbk00byd86mvjf8dvcz-add-flags.sh","/home/matto/projects/haskell/store-graph/test/store/k3dgbj7rp6bgihp1papa4hlsvcja6z62-role.bash","/home/matto/projects/haskell/store-graph/test/store/khl5mchjvragzhn5d2qlw72cn8kgrmrj-default-builder.sh","/home/matto/projects/haskell/store-graph/test/store/z0lb6v7v7afhvazvkrxmf6157azib7dz-utils.bash"],"x86_64-linux","/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/bin/bash",["-e","/home/matto/projects/haskell/store-graph/test/store/khl5mchjvragzhn5d2qlw72cn8kgrmrj-default-builder.sh"],[("bintools","/home/matto/projects/haskell/store-graph/test/store/9ymdp1l2p3yzqzl0j9zg3zywycp5k9jq-bootstrap-stage0-binutils-wrapper"),("buildInputs",""),("builder","/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/bin/bash"),("cc","/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools"),("configureFlags",""),("coreutils_bin","/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools"),("depsBuildBuild",""),("depsBuildBuildPropagated",""),("depsBuildTarget",""),("depsBuildTargetPropagated",""),("depsHostHost",""),("depsHostHostPropagated",""),("depsTargetTarget",""),("depsTargetTargetPropagated",""),("doCheck",""),("doInstallCheck",""),("dontBuild","1"),("dontConfigure","1"),("expand-response-params",""),("expandResponseParams","/bin/expand-response-params"),("gnugrep_bin","/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools"),("infixSalt","x86_64_unknown_linux_gnu"),("installPhase","set -u\n\nmkdir -p $out/bin $out/nix-support\n\nwrap() {\n  local dst=\"$1\"\n  local wrapper=\"$2\"\n  export prog=\"$3\"\n  substituteAll \"$wrapper\" \"$out/bin/$dst\"\n  chmod +x \"$out/bin/$dst\"\n}\necho $cc > $out/nix-support/orig-cc\n\nccPath=\"/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/bin\"\n# Create symlinks to everything in the bintools wrapper.\nfor bbin in $bintools/bin/*; do\n  mkdir -p \"$out/bin\"\n  ln -s \"$bbin\" \"$out/bin/$(basename $bbin)\"\ndone\n\n# We export environment variables pointing to the wrapped nonstandard\n# cmds, lest some lousy configure script use those to guess compiler\n# version.\nexport named_cc=cc\nexport named_cxx=c++\n\nexport default_cxx_stdlib_compile=\"\"\n\nif [ -e $ccPath/gcc ]; then\n  wrap gcc /home/matto/projects/haskell/store-graph/test/store/3fb2y6zvc9axs7n3l8460573cvqrg2gv-cc-wrapper.sh $ccPath/gcc\n  ln -s gcc $out/bin/cc\n  export named_cc=gcc\n  export named_cxx=g++\nelif [ -e $ccPath/clang ]; then\n  wrap clang /home/matto/projects/haskell/store-graph/test/store/3fb2y6zvc9axs7n3l8460573cvqrg2gv-cc-wrapper.sh $ccPath/clang\n  ln -s clang $out/bin/cc\n  export named_cc=clang\n  export named_cxx=clang++\nfi\n\nif [ -e $ccPath/g++ ]; then\n  wrap g++ /home/matto/projects/haskell/store-graph/test/store/3fb2y6zvc9axs7n3l8460573cvqrg2gv-cc-wrapper.sh $ccPath/g++\n  ln -s g++ $out/bin/c++\nelif [ -e $ccPath/clang++ ]; then\n  wrap clang++ /home/matto/projects/haskell/store-graph/test/store/3fb2y6zvc9axs7n3l8460573cvqrg2gv-cc-wrapper.sh $ccPath/clang++\n  ln -s clang++ $out/bin/c++\nfi\n\nif [ -e $ccPath/cpp ]; then\n  wrap cpp /home/matto/projects/haskell/store-graph/test/store/3fb2y6zvc9axs7n3l8460573cvqrg2gv-cc-wrapper.sh $ccPath/cpp\nfi\n"),("libc_bin","/home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc"),("libc_dev","/home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc"),("libc_lib","/home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc"),("name","bootstrap-stage1-gcc-wrapper"),("nativeBuildInputs",""),("out","/home/matto/projects/haskell/store-graph/test/store/nqg73y4xzkip8qvl0924g0qcjiswdlbi-bootstrap-stage1-gcc-wrapper"),("outputs","out"),("postFixup","set -u\n\n# Backwards compatability for packages expecting this file, e.g. with\n# `$NIX_CC/nix-support/dynamic-linker`.\n#\n# TODO(@Ericson2314): Remove this after stable release and force\n# everyone to refer to bintools-wrapper directly.\nif [[ -f \"$bintools/nix-support/dynamic-linker\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker\" \"$out/nix-support\"\nfi\nif [[ -f \"$bintools/nix-support/dynamic-linker-m32\" ]]; then\n  ln -s \"$bintools/nix-support/dynamic-linker-m32\" \"$out/nix-support\"\nfi\n##\n## General libc support\n##\n\n# The \"-B/home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc/lib/\" flag is a quick hack to force gcc to link\n# against the crt1.o from our own glibc, rather than the one in\n# /usr/lib.  (This is only an issue when using an `impure'\n# compiler/linker, i.e., one that searches /usr/lib and so on.)\n#\n# Unfortunately, setting -B appears to override the default search\n# path. Thus, the gcc-specific \"../includes-fixed\" directory is\n# now longer searched and glibc's <limits.h> header fails to\n# compile, because it uses \"#include_next <limits.h>\" to find the\n# limits.h file in ../includes-fixed. To remedy the problem,\n# another -idirafter is necessary to add that directory again.\necho \"-B/home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc/lib/ -idirafter /home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc/include -idirafter /home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib/gcc/*/*/include-fixed\" > $out/nix-support/libc-cflags\n\necho \"/home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc\" > $out/nix-support/orig-libc\necho \"/home/matto/projects/haskell/store-graph/test/store/sk38hbvw26zcbk2iwv51mpdracrx7sqh-bootstrap-stage0-glibc\" > $out/nix-support/orig-libc-dev\n##\n## Initial CFLAGS\n##\n\n# GCC shows /home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib in `gcc -print-search-dirs', but not\n# /home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib64 (even though it does actually search there...)..\n# This confuses libtool.  So add it to the compiler tool search\n# path explicitly.\nif [ -e \"/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib64\" -a ! -L \"/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib64\" ]; then\n  ccLDFlags+=\" -L/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib64\"\n  ccCFlags+=\" -B/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib64\"\nfi\nccLDFlags+=\" -L/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib\"\nccCFlags+=\" -B/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/lib\"\n\necho \"$ccLDFlags\" > $out/nix-support/cc-ldflags\necho \"$ccCFlags\" > $out/nix-support/cc-cflags\n##\n## Hardening support\n##\n\nexport hardening_unsupported_flags=\"\"\nsubstituteAll /home/matto/projects/haskell/store-graph/test/store/fh1b3qgm8v91fnbk00byd86mvjf8dvcz-add-flags.sh $out/nix-support/add-flags.sh\nsubstituteAll /home/matto/projects/haskell/store-graph/test/store/f4r0bk1zskca675nwynsfak92izkkchf-add-hardening.sh $out/nix-support/add-hardening.sh\nsubstituteAll /home/matto/projects/haskell/store-graph/test/store/z0lb6v7v7afhvazvkrxmf6157azib7dz-utils.bash $out/nix-support/utils.bash\n\n##\n## Extra custom steps\n##\n"),("preferLocalBuild","1"),("propagatedBuildInputs","/home/matto/projects/haskell/store-graph/test/store/9ymdp1l2p3yzqzl0j9zg3zywycp5k9jq-bootstrap-stage0-binutils-wrapper"),("propagatedNativeBuildInputs",""),("setupHooks","/home/matto/projects/haskell/store-graph/test/store/k3dgbj7rp6bgihp1papa4hlsvcja6z62-role.bash /home/matto/projects/haskell/store-graph/test/store/7acjx0rnikxdbj5wzlq5hicipc2q9647-setup-hook.sh"),("shell","/home/matto/projects/haskell/store-graph/test/store/wdms8vvqaf1va01nxxj554vagasc6spc-bootstrap-tools/bin/bash"),("stdenv","/home/matto/projects/haskell/store-graph/test/store/h70frsxwknkz8g3fx727mll82a3g9kng-bootstrap-stage0-stdenv-linux"),("strictDeps","1"),("system","x86_64-linux"),("targetPrefix",""),("unpackPhase","src=$PWD\n"),("wrapperName","CC_WRAPPER")])